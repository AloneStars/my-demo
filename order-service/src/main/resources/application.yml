# Bug fix for MySQL JDBC driver:
# CST: Central Standard Time (USA) UT-6:00
# CST: Central Standard Time (Australia) UT+9:30
# CST: China Standard Time UT+8:00
# CST: Cuba Standard Time UT-4:00
# MySQL Server get timezone from OS, show variables like '%time_zone%':
#    | Variable_name    | Value  |
#    | system_time_zone | CST    |
#    | time_zone        | SYSTEM |
# java.util.Date is converted to java.sql.Timestamp and passed to MySQL JDBC Driver by MyBatis DateTypeHandler,
# MySQL JDBC Driver uses timezone CST to process Timestamp parameters, 
# the actual timezone it takes is Central Standard Time (USA) UT-6:00, not China Standard Time UT+8:00.
# Specify serverTimezone=Asia/Shanghai parameter in JDBC url to avoid this problem.
spring:
   main:
      allow-bean-definition-overriding: true
   output:
      ansi:
         enabled: always
   datasource:
      driver-class-name: ${mysql.driver-class}
      url: jdbc:mysql://${mysql.host}:${mysql.port}/${db.order}?connectTimeout=3000&socketTimeout=10000&characterEncoding=utf8&useTimezone=true&serverTimezone=Asia/Shanghai&useSSL=false${jdbc.interceptors}
      username: ${mysql.user}  
      password: ${mysql.password}

dubbo:
    application: # see com.alibaba.dubbo.config.ApplicationConfig
        id: ${application.name}-srv
        name: ${application.name}-srv
        qosEnable: false
    protocol: # see com.alibaba.dubbo.config.ProtocolConfig
        id: dubbo
        name: dubbo
        host: ${SERVICE_HOST:localhost} # Use POD IP to register Dubbo service
        port: ${SERVICE_PORT:20883}
        threads: 3
        iothreads: 1
        server: netty
        client: netty
        status: server
        serialization: fst
        queues: 0
        keepAlive: true
    registry: # see com.alibaba.dubbo.config.RegistryConfig
        address: nacos://${nacos.address}
        check: false
    provider:
        cluster: failfast
        retries: 0
        loadbalance: roundrobin
        timeout: 10000
        filter: ${dubbo.filter}
    consumer:
        filter: ${dubbo.filter}
        # Fault tolerance. Options: failover/failfast/failsafe/failback/forking
        cluster: failfast
        # Load balancing strategy. Options: random, roundrobin(polling), leastactive(invoking least active service)
        loadbalance: roundrobin

druid:
   defaultAutoCommit: true
   defaultTransactionIsolation: 2
   initialSize: 1
   maxActive: 3
   maxWait: 10000
   minIdle: 1
   validationQuery: /* ping */ select 1
   testOnBorrow: false
   testOnReturn: false
   testWhileIdle: true
   timeBetweenEvictionRunsMillis: 60000
   minEvictableIdleTimeMillis: 1800000
   removeAbandoned: true
   removeAbandonedTimeout: 1800
   logAbandoned: true

mybatis: # see MybatisProperties.class in mybatis-spring-boot-autoconfigure
   mapperLocations: classpath:mappers/*.xml

seata:
  enabled: true
  application-id: ${application.name}
  tx-service-group: my_demo_gtx
  config:
    type: nacos
    nacos:
      namespace:
      serverAddr: ${nacos.address}
  registry:
    type: nacos
    nacos:
      cluster: default
      server-addr: ${nacos.address}
      namespace:

zipkin:
   server: ${zipkin.base-url}/api/v2/spans
   connectTimeout: 5000
   readTimeout: 5000