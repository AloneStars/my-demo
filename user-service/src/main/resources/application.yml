# MySQL JDBC Driver的Bug（Mac OSX环境下）：
# 中国的时区简写为CST (China Standard Time)，但全球简写为CST的时区一共有4个：
#    CST Central Standard Time (USA) UT-6:00
#    CST Central Standard Time (Australia) UT+9:30
#    CST China Standard Time UT+8:00
#    CST Cuba Standard Time UT-4:00
# 安装MySQL Server时，从操作系统获取时区并以简写CST表示，show variables like '%time_zone%'如下：
#    | Variable_name    | Value  |
#    | system_time_zone | CST    |
#    | time_zone        | SYSTEM |
# MyBatis的DateTypeHandler将java.util.Date类型转换成java.sql.Timestamp交给MySQL JDBC Driver处理，
# 而MySQL JDBC Driver会使用MySQL Server的CST创建Java TimeZone对象来处理Timestamp参数，
# 此时实际得到的Java TimeZone为Central Standard Time (USA) UT-6:00，而不是China Standard Time UT+8:00，导致存入MySQL的时间不正确。
# 通过JDBC url的serverTimezone参数指定TimeZone ID全称可以避免这个问题。
spring:
   main:
      allow-bean-definition-overriding: true
   output:
      ansi:
         enabled: always
   datasource:  
      driver-class-name: ${mysql.driver-class}
      url: jdbc:mysql://${mysql.host}:${mysql.port}/${db.user}?connectTimeout=3000&socketTimeout=10000&characterEncoding=utf8&useTimezone=true&serverTimezone=Asia/Shanghai&useSSL=false${jdbc.interceptors}
      username: ${mysql.user}  
      password: ${mysql.password}

dubbo:
    application: # see com.alibaba.dubbo.config.ApplicationConfig
        id: ${application.name}-srv
        name: ${application.name}-srv
        qosEnable: false
    protocol: # see com.alibaba.dubbo.config.ProtocolConfig
        id: dubbo
        name: dubbo
        port: ${SERVICE_PORT:20882}
        threads: 3
        iothreads: 1
        server: netty
        client: netty
        status: server
        serialization: fst
        queues: 0
        keepAlive: true
    registry: # see com.alibaba.dubbo.config.RegistryConfig
        address: nacos://${nacos.address}
    provider:
        cluster: failfast
        retries: 0
        loadbalance: roundrobin
        timeout: 10000
        filter: ${dubbo.filter}

druid:
   defaultAutoCommit: true
   defaultTransactionIsolation: 2
   initialSize: 1
   maxActive: 3
   maxWait: 5000
   minIdle: 1
   validationQuery: /* ping */ select 1
   testOnBorrow: false
   testOnReturn: false
   testWhileIdle: true
   timeBetweenEvictionRunsMillis: 60000 # 每分钟心跳测试
   minEvictableIdleTimeMillis: 1800000  # 空闲30分钟回收 
   removeAbandoned: true
   removeAbandonedTimeout: 1800
   logAbandoned: true

# Spring Boot应用中mybatis的配置方法（备注：改为手工创建SessionFactory）
mybatis: # see MybatisProperties.class in mybatis-spring-boot-autoconfigure
   mapperLocations: classpath:mappers/*.xml

seata:
  enabled: true
  application-id: ${application.name}
  tx-service-group: my_demo_gtx
  config:
    type: nacos
    nacos:
      namespace:
      serverAddr: ${nacos.address}
  registry:
    type: nacos
    nacos:
      cluster: default
      server-addr: ${nacos.address}
      namespace:

zipkin:
   server: ${zipkin.base-url}/api/v2/spans
   connectTimeout: 5000
   readTimeout: 5000