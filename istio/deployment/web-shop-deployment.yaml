kind: Service
apiVersion: v1
metadata:
  name: web-shop
spec:
  ports:
    - name: http
      port: 8090
      targetPort: 8090
  selector:
    app: web-shop
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-shop-v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-shop
      version: v1
  template:
    metadata:
      labels:
        app: web-shop
        version: v1
    spec:
      containers:
      - name: web-shop
        image: mydemo/shopweb
        imagePullPolicy: IfNotPresent
        env:
        - name: NACOS_HOST
          value: "pub-nacos.default.svc.cluster.local"
        - name: ZIPKIN_HOST
          value: "pub-zipkin.default.svc.cluster.local"
        - name: SHOP_VERSION
          value: "v1"
        ports:
        - containerPort: 8090
        readinessProbe: # Check whether web-shop is ready
          exec:
            command: ["sh", "-c", "COUNT=`netstat -antp tcp|grep 8090|grep LISTEN -c`; if [ $COUNT -eq 1 ]; then exit 0; else exit 1; fi"]
          initialDelaySeconds: 3    # Wait initialDelaySeconds to check the first time
          periodSeconds: 5          # Wait periodSeconds to check next time
          timeoutSeconds: 2         # Timeout for check process
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-shop-v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-shop
      version: v2
  template:
    metadata:
      labels:
        app: web-shop
        version: v2
    spec:
      containers:
      - name: web-shop
        image: mydemo/shopweb
        imagePullPolicy: IfNotPresent
        env:
        - name: NACOS_HOST
          value: "pub-nacos.default.svc.cluster.local"
        - name: ZIPKIN_HOST
          value: "pub-zipkin.default.svc.cluster.local"
        - name: SHOP_VERSION
          value: "v2"
        ports:
        - containerPort: 8090
        readinessProbe: # Check whether web-shop is ready
          exec:
            command: ["sh", "-c", "COUNT=`netstat -antp tcp|grep 8090|grep LISTEN -c`; if [ $COUNT -eq 1 ]; then exit 0; else exit 1; fi"]
          initialDelaySeconds: 3    # Wait initialDelaySeconds to check the first time
          periodSeconds: 5          # Wait periodSeconds to check next time
          timeoutSeconds: 2         # Timeout for check process
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: web-shop
spec:
  host: web-shop.default.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: web-shop-gateway
  namespace: istio-system
spec:
  selector:
    # Require istio-ingressgateway installed
    app: istio-ingressgateway
  servers:
    - port:
        number: 80 # Port exposed by istio-ingressgateway
        name: http
        protocol: HTTP
      hosts:
      # Please bind myshop.com to Host IP in local hosts file,
      # and visit http://myshop.com/hello/YourName.
      - myshop.com 
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: web-shop
spec:
  hosts:
  - web-shop.default.svc.cluster.local # Requests from other PODs in k8s cluster (Internal visits).
  - myshop.com # Requests from ingressgateway (External visits).
  gateways:
  - mesh # Hidden gateway for routing internal visits
  - web-shop-gateway.istio-system.svc.cluster.local # ingressgateway
  http:
  # If query param version=v2 exists, route to web-shop-v2
  - match: 
    - queryParams:
        version:
          exact: v2
    route:
    - destination:
        host: web-shop.default.svc.cluster.local
        subset: v2
        port:
          number: 8090
  # Route to web-shop-v1 by default
  - route:
    - destination:
        host: web-shop.default.svc.cluster.local
        subset: v1
        port:
          number: 8090
  exportTo:
  - "*"