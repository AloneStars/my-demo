{
	"info": {
		"_postman_id": "b98ba5bf-8843-4063-b411-dd3a2015e7ff",
		"name": "mydemo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "order",
			"item": [
				{
					"name": "register-a-user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "09a480e6-8b07-48b7-9a79-a9a12a7b6f11",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "57dd4f97-248c-4074-9e18-d7070235b5f1",
								"exec": [
									"console.log('[order] [register] Response: ' + pm.response.text());",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// Dynamic variables such as $xxx provided by Postman can not be used in Pre-request and Tests scripts.",
									"// In this example it's used in query params.",
									"// pm.request.url.query.get('password') returns {{$randomPassword}} in Pre-request script, ",
									"// and returns the value such as b851JpM_Ej7UwCG in Tests script.",
									"const mobile = pm.request.url.query.get('mobile'); // Random account generated by Postman",
									"const password = pm.request.url.query.get('password'); //Random password generated by Postman",
									"const contentType = postman.getResponseHeader('Content-Type');",
									"postman.setNextRequest('user-login');",
									"var alreadyRegistered = false;",
									"if(contentType.indexOf('application/json')<0) {",
									"    // If already registered, try register again by another random account and password",
									"    if(pm.response.text().indexOf('Account ' + mobile + ' already registered')>=0) {",
									"        alreadyRegistered = true;",
									"        var retries = pm.collectionVariables.get('register-retries');",
									"        if(!retries) retries = 1;",
									"        if(retries>=3) { // Only retry 3 times",
									"            pm.collectionVariables.unset('register-retries');",
									"            return; //Stop all tests here",
									"        }",
									"        console.log('[order] [register] User ' + mobile + ' already registered, try another user account');",
									"        pm.collectionVariables.set('register-retries', retries + 1);",
									"        postman.setNextRequest('register-a-user');",
									"    }",
									"}",
									"if(!alreadyRegistered) {",
									"    var user = pm.response.json();",
									"    // Save user info into collection variables, so the next Requests can use these variables",
									"    pm.collectionVariables.set('user-mobile', mobile);",
									"    pm.collectionVariables.set('user-password', password);",
									"    pm.collectionVariables.set('user-id', user.userId);",
									"    console.log('[order] [register] User register successful, account: ' + mobile + ', password: ' + password + ', userId: ' + user.userId);",
									"    ",
									"    pm.test('Content-Type is application/json', function() {",
									"        pm.expect(contentType).to.have.string('application/json');",
									"    });",
									"    pm.test('User id ' + user.userId + ' is valid', function () {",
									"        pm.expect(user.userId).to.above(0);",
									"    });",
									"    pm.test('User mobile is ' + pm.variables.get('user-mobile'), function () {",
									"        pm.expect(user.mobile).to.eql(pm.variables.get('user-mobile'));",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{shopweb}}/shop/register?mobile=139{{$randomBankAccount}}&password={{$randomPassword}}",
							"protocol": "http",
							"host": [
								"{{shopweb}}"
							],
							"path": [
								"shop",
								"register"
							],
							"query": [
								{
									"key": "mobile",
									"value": "139{{$randomBankAccount}}"
								},
								{
									"key": "password",
									"value": "{{$randomPassword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user-login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5534b25a-1259-4ac3-95f9-fff51a3499df",
								"exec": [
									"console.log('[order] [login] Response: ' + pm.response.text());",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const contentType = postman.getResponseHeader('Content-Type');",
									"pm.test('Content-Type is application/json', function() {",
									"    pm.expect(contentType).to.have.string('application/json');",
									"});",
									"if(pm.response.code==200 && contentType.indexOf('application/json')>=0) {",
									"    var user = pm.response.json();",
									"    console.log('[order] [login] User login successful');",
									"    pm.test('User id is ' + pm.variables.get('user-id'), function () {",
									"        pm.expect(user.userId).to.eql(pm.variables.get('user-id'));",
									"    });",
									"    pm.test('User mobile is ' + pm.variables.get('user-mobile'), function () {",
									"        pm.expect(user.mobile).to.eql(pm.variables.get('user-mobile'));",
									"    });",
									"    postman.setNextRequest('create-an-order');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{shopweb}}/shop/login?mobile={{user-mobile}}&password={{user-password}}",
							"protocol": "http",
							"host": [
								"{{shopweb}}"
							],
							"path": [
								"shop",
								"login"
							],
							"query": [
								{
									"key": "mobile",
									"value": "{{user-mobile}}"
								},
								{
									"key": "password",
									"value": "{{user-password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create-an-order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d972d82b-1f9b-4690-8e6f-8729edac7c9a",
								"exec": [
									"console.log('[order] [create] Response: ' + pm.response.text());",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const contentType = postman.getResponseHeader('Content-Type');",
									"pm.test('Content-Type is application/json', function() {",
									"    pm.expect(contentType).to.have.string('application/json');",
									"});",
									"if(pm.response.code==200 && contentType.indexOf('application/json')>=0) {",
									"    const order = pm.response.json();",
									"    console.log('[order] [create] Order created, orderId: ' + order.orderId);",
									"    pm.test('Order id ' + order.orderId + ' is valid', function () {",
									"        pm.expect(order.orderId).to.above(0);",
									"    });",
									"    pm.test('Order user id is ' + pm.variables.get('user-id'), function () {",
									"        pm.expect(order.userId).to.eql(pm.variables.get('user-id'));",
									"    });",
									"    pm.test('Order status is New', function () {",
									"        pm.expect(order.status).to.eql('New');",
									"    });",
									"    pm.test('Order total ' + order.total + ' is valid', function () {",
									"        pm.expect(order.total).to.above(0);",
									"    });",
									"    pm.test('Order pay status is New', function () {",
									"        pm.expect(order.payStatus).to.eql('New');",
									"    });",
									"    pm.test('Order payment is 0', function () {",
									"        pm.expect(order.payment).to.eql(0);",
									"    });",
									"    pm.test('Order phone is ' + pm.variables.get('user-mobile'), function () {",
									"        pm.expect(order.phone).to.eql(pm.variables.get('user-mobile'));",
									"    });",
									"    pm.test('Order items is valid', function () {",
									"        pm.expect(order.items).to.not.be.NaN;",
									"        pm.expect(order.items.length).to.above(0);",
									"    });",
									"}",
									"// Clear collection variables",
									"pm.collectionVariables.unset('user-id');",
									"pm.collectionVariables.unset('user-mobile');",
									"pm.collectionVariables.unset('user-password');",
									"pm.collectionVariables.unset('register-retries');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "user-id={{user-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{shopweb}}/shop/order/create",
							"protocol": "http",
							"host": [
								"{{shopweb}}"
							],
							"path": [
								"shop",
								"order",
								"create"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user",
			"item": [
				{
					"name": "register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "492c1d0a-e77f-45a0-9d21-52c0af80c9df",
								"exec": [
									"const mobile = pm.request.url.query.get('mobile');\r",
									"const password = pm.request.url.query.get('password');\r",
									"console.log('[user] [register] User to be registered: ' + mobile + \" : \" + password);\r",
									"// Save mobile and password as local variables\r",
									"pm.variables.set('user-mobile', mobile);\r",
									"pm.variables.set('user-password', password);\r",
									"// Query MySQL if mobile is registered\r",
									"const url = 'http://' + pm.environment.get('xmysql') + '/api/usr_user_account?_where=(account,eq,' + mobile + ')';\r",
									"pm.sendRequest(url, function (err, response) {\r",
									"    if(err) {\r",
									"        console.log('[user] [register] Can not identify whether the user is registered, MySQL error: ' + err.code);\r",
									"        const text = response.text();\r",
									"        if(text) console.log(text);\r",
									"        return;\r",
									"    }\r",
									"    if(response.code!='200' || response.headers.get('Content-Type').indexOf('application/json')<0) {\r",
									"        console.log('[user] [register] Can not identify whether the user is registered, MySQL error.');\r",
									"        const text = response.text();\r",
									"        if(text) console.log(text);\r",
									"        return;\r",
									"    } \r",
									"    var json = response.json();\r",
									"    if(json.length<=0) {\r",
									"        console.log('[user] [register] User ' + mobile + ' not registered');\r",
									"        return;\r",
									"    }\r",
									"    const userId = json[0].user_id;\r",
									"    console.log('[user] [register] ' + mobile + ' is already registered, userId is ' + userId + ', delete it from MySQL');\r",
									"    pm.sendRequest(\r",
									"        { url:'http://' + pm.environment.get('xmysql') + '/api/usr_user_account/' + mobile, method: 'DELETE' }, \r",
									"        function(err1, rsp1) {\r",
									"            if(err1) console.log('[user] [register] Delete user account ' + mobile + ' failed');\r",
									"        }\r",
									"    );\r",
									"    pm.sendRequest(\r",
									"        { url:'http://' + pm.environment.get('xmysql') + '/api/usr_user/' + userId, method: 'DELETE' }, \r",
									"        function(err2, rsp2) {\r",
									"            if(err2) console.log('[user] [register] Delete user ' + userId + ' failed');\r",
									"        }\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e5eff959-17ff-4910-9ea3-ba13410d6a53",
								"exec": [
									"console.log('[user] [register] Response: ' + pm.response.text());",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const contentType = postman.getResponseHeader('Content-Type');",
									"pm.test('Content-Type is application/json', function() {",
									"    pm.expect(contentType).to.have.string('application/json');",
									"});",
									"if(pm.response.code==200 && contentType.indexOf('application/json')>=0) {",
									"    var user = pm.response.json();",
									"    pm.test('User mobile is ' + pm.variables.get('user-mobile'), function () {",
									"        pm.expect(user.mobile).to.eql(pm.variables.get('user-mobile'));",
									"    });",
									"    console.log('[user] [register] User register successful, userId: ' + user.userId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{shopweb}}/shop/register?mobile=13966668888&password=qwe123",
							"protocol": "http",
							"host": [
								"{{shopweb}}"
							],
							"path": [
								"shop",
								"register"
							],
							"query": [
								{
									"key": "mobile",
									"value": "13966668888"
								},
								{
									"key": "password",
									"value": "qwe123"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c2b12661-5763-4e05-ae6b-75cc16f6294b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "08897af3-80b8-4e8d-928a-6c21732b020e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}