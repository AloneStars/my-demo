{
  "collection": {
    "_": {
      "postman_id": "b98ba5bf-8843-4063-b411-dd3a2015e7ff"
    },
    "item": [
      {
        "id": "cb4429ab-e604-4520-8538-336ec8181498",
        "name": "order",
        "item": [
          {
            "id": "09827713-58b5-4d43-a261-6eea14a73505",
            "name": "register-a-user",
            "request": {
              "url": {
                "protocol": "http",
                "path": [
                  "shop",
                  "register"
                ],
                "host": [
                  "{{shopweb}}"
                ],
                "query": [
                  {
                    "key": "mobile",
                    "value": "139{{$randomBankAccount}}"
                  },
                  {
                    "key": "password",
                    "value": "{{$randomPassword}}"
                  }
                ],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "09a480e6-8b07-48b7-9a79-a9a12a7b6f11",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba779244-5428-4326-9f7a-bf9bd2a2427d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "57dd4f97-248c-4074-9e18-d7070235b5f1",
                  "type": "text/javascript",
                  "exec": [
                    "console.log('[order] [register] Response: ' + pm.response.text());",
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "// Dynamic variables such as $xxx provided by Postman can not be used in Pre-request and Tests scripts.",
                    "// In this example it's used in query params.",
                    "// pm.request.url.query.get('password') returns {{$randomPassword}} in Pre-request script, ",
                    "// and returns the value such as b851JpM_Ej7UwCG in Tests script.",
                    "const mobile = pm.request.url.query.get('mobile'); // Random account generated by Postman",
                    "const password = pm.request.url.query.get('password'); //Random password generated by Postman",
                    "const contentType = postman.getResponseHeader('Content-Type');",
                    "postman.setNextRequest('user-login');",
                    "var alreadyRegistered = false;",
                    "if(contentType.indexOf('application/json')<0) {",
                    "    // If already registered, try register again by another random account and password",
                    "    if(pm.response.text().indexOf('Account ' + mobile + ' already registered')>=0) {",
                    "        alreadyRegistered = true;",
                    "        var retries = pm.collectionVariables.get('register-retries');",
                    "        if(!retries) retries = 1;",
                    "        if(retries>=3) { // Only retry 3 times",
                    "            pm.collectionVariables.unset('register-retries');",
                    "            return; //Stop all tests here",
                    "        }",
                    "        console.log('[order] [register] User ' + mobile + ' already registered, try another user account');",
                    "        pm.collectionVariables.set('register-retries', retries + 1);",
                    "        postman.setNextRequest('register-a-user');",
                    "    }",
                    "}",
                    "if(!alreadyRegistered) {",
                    "    var user = pm.response.json();",
                    "    // Save user info into collection variables, so the next Requests can use these variables",
                    "    pm.collectionVariables.set('user-mobile', mobile);",
                    "    pm.collectionVariables.set('user-password', password);",
                    "    pm.collectionVariables.set('user-id', user.userId);",
                    "    console.log('[order] [register] User register successful, account: ' + mobile + ', password: ' + password + ', userId: ' + user.userId);",
                    "    ",
                    "    pm.test('Content-Type is application/json', function() {",
                    "        pm.expect(contentType).to.have.string('application/json');",
                    "    });",
                    "    pm.test('User id ' + user.userId + ' is valid', function () {",
                    "        pm.expect(user.userId).to.above(0);",
                    "    });",
                    "    pm.test('User mobile is ' + pm.variables.get('user-mobile'), function () {",
                    "        pm.expect(user.mobile).to.eql(pm.variables.get('user-mobile'));",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "6dd879a4-2f7d-448e-84bc-05569b4d4e3a"
                }
              }
            ]
          },
          {
            "id": "51491234-46e0-4b84-ad12-2772eb8752fb",
            "name": "user-login",
            "request": {
              "url": {
                "protocol": "http",
                "path": [
                  "shop",
                  "login"
                ],
                "host": [
                  "{{shopweb}}"
                ],
                "query": [
                  {
                    "key": "mobile",
                    "value": "{{user-mobile}}"
                  },
                  {
                    "key": "password",
                    "value": "{{user-password}}"
                  }
                ],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5534b25a-1259-4ac3-95f9-fff51a3499df",
                  "type": "text/javascript",
                  "exec": [
                    "console.log('[order] [login] Response: ' + pm.response.text());",
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "const contentType = postman.getResponseHeader('Content-Type');",
                    "pm.test('Content-Type is application/json', function() {",
                    "    pm.expect(contentType).to.have.string('application/json');",
                    "});",
                    "if(pm.response.code==200 && contentType.indexOf('application/json')>=0) {",
                    "    var user = pm.response.json();",
                    "    console.log('[order] [login] User login successful');",
                    "    pm.test('User id is ' + pm.variables.get('user-id'), function () {",
                    "        pm.expect(user.userId).to.eql(pm.variables.get('user-id'));",
                    "    });",
                    "    pm.test('User mobile is ' + pm.variables.get('user-mobile'), function () {",
                    "        pm.expect(user.mobile).to.eql(pm.variables.get('user-mobile'));",
                    "    });",
                    "    postman.setNextRequest('create-an-order');",
                    "}"
                  ],
                  "_lastExecutionId": "974a4d57-b636-4207-87de-423626b35b17"
                }
              }
            ]
          },
          {
            "id": "2f6f33ec-ea6b-42b2-b093-66ac41987cb3",
            "name": "create-an-order",
            "request": {
              "url": {
                "protocol": "http",
                "path": [
                  "shop",
                  "order",
                  "create"
                ],
                "host": [
                  "{{shopweb}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Cookie",
                  "value": "user-id={{user-id}}"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d972d82b-1f9b-4690-8e6f-8729edac7c9a",
                  "type": "text/javascript",
                  "exec": [
                    "console.log('[order] [create] Response: ' + pm.response.text());",
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "const contentType = postman.getResponseHeader('Content-Type');",
                    "pm.test('Content-Type is application/json', function() {",
                    "    pm.expect(contentType).to.have.string('application/json');",
                    "});",
                    "if(pm.response.code==200 && contentType.indexOf('application/json')>=0) {",
                    "    const order = pm.response.json();",
                    "    console.log('[order] [create] Order created, orderId: ' + order.orderId);",
                    "    pm.test('Order id ' + order.orderId + ' is valid', function () {",
                    "        pm.expect(order.orderId).to.above(0);",
                    "    });",
                    "    pm.test('Order user id is ' + pm.variables.get('user-id'), function () {",
                    "        pm.expect(order.userId).to.eql(pm.variables.get('user-id'));",
                    "    });",
                    "    pm.test('Order status is New', function () {",
                    "        pm.expect(order.status).to.eql('New');",
                    "    });",
                    "    pm.test('Order total ' + order.total + ' is valid', function () {",
                    "        pm.expect(order.total).to.above(0);",
                    "    });",
                    "    pm.test('Order pay status is New', function () {",
                    "        pm.expect(order.payStatus).to.eql('New');",
                    "    });",
                    "    pm.test('Order payment is 0', function () {",
                    "        pm.expect(order.payment).to.eql(0);",
                    "    });",
                    "    pm.test('Order phone is ' + pm.variables.get('user-mobile'), function () {",
                    "        pm.expect(order.phone).to.eql(pm.variables.get('user-mobile'));",
                    "    });",
                    "    pm.test('Order items is valid', function () {",
                    "        pm.expect(order.items).to.not.be.NaN;",
                    "        pm.expect(order.items.length).to.above(0);",
                    "    });",
                    "}",
                    "// Clear collection variables",
                    "pm.collectionVariables.unset('user-id');",
                    "pm.collectionVariables.unset('user-mobile');",
                    "pm.collectionVariables.unset('user-password');",
                    "pm.collectionVariables.unset('register-retries');"
                  ],
                  "_lastExecutionId": "7f97c125-a802-49a1-9f76-9a57256a4a13"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "175f0c0e-4fb6-443e-ab4d-a6f414fb16bb",
        "name": "user",
        "item": [
          {
            "id": "6a0139df-5ecf-4c39-892c-b173f4bc16e8",
            "name": "register",
            "request": {
              "url": {
                "protocol": "http",
                "path": [
                  "shop",
                  "register"
                ],
                "host": [
                  "{{shopweb}}"
                ],
                "query": [
                  {
                    "key": "mobile",
                    "value": "13966668888"
                  },
                  {
                    "key": "password",
                    "value": "111111"
                  }
                ],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "492c1d0a-e77f-45a0-9d21-52c0af80c9df",
                  "type": "text/javascript",
                  "exec": [
                    "const mobile = pm.request.url.query.get('mobile');\r",
                    "const password = pm.request.url.query.get('password');\r",
                    "console.log('[user] [register] User to be registered: ' + mobile + \" : \" + password);\r",
                    "// Save mobile and password as local variables\r",
                    "pm.variables.set('user-mobile', mobile);\r",
                    "pm.variables.set('user-password', password);\r",
                    "// Query MySQL if mobile is registered\r",
                    "const url = 'http://' + pm.environment.get('xmysql') + '/api/usr_user_account?_where=(account,eq,' + mobile + ')';\r",
                    "pm.sendRequest(url, function (err, response) {\r",
                    "    if(err) {\r",
                    "        console.log('[user] [register] Can not identify whether the user is registered, MySQL error: ' + err.code);\r",
                    "        const text = response.text();\r",
                    "        if(text) console.log(text);\r",
                    "        return;\r",
                    "    }\r",
                    "    if(response.code!='200' || response.headers.get('Content-Type').indexOf('application/json')<0) {\r",
                    "        console.log('[user] [register] Can not identify whether the user is registered, MySQL error.');\r",
                    "        const text = response.text();\r",
                    "        if(text) console.log(text);\r",
                    "        return;\r",
                    "    } \r",
                    "    var json = response.json();\r",
                    "    if(json.length<=0) {\r",
                    "        console.log('[user] [register] User ' + mobile + ' not registered');\r",
                    "        return;\r",
                    "    }\r",
                    "    const userId = json[0].user_id;\r",
                    "    console.log('[user] [register] ' + mobile + ' is already registered, userId is ' + userId + ', delete it from MySQL');\r",
                    "    pm.sendRequest(\r",
                    "        { url:'http://' + pm.environment.get('xmysql') + '/api/usr_user_account/' + mobile, method: 'DELETE' }, \r",
                    "        function(err1, rsp1) {\r",
                    "            if(err1) console.log('[user] [register] Delete user account ' + mobile + ' failed');\r",
                    "        }\r",
                    "    );\r",
                    "    pm.sendRequest(\r",
                    "        { url:'http://' + pm.environment.get('xmysql') + '/api/usr_user/' + userId, method: 'DELETE' }, \r",
                    "        function(err2, rsp2) {\r",
                    "            if(err2) console.log('[user] [register] Delete user ' + userId + ' failed');\r",
                    "        }\r",
                    "    );\r",
                    "});"
                  ],
                  "_lastExecutionId": "62cf54f8-39fa-4ef9-839c-0001918e2aea"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e5eff959-17ff-4910-9ea3-ba13410d6a53",
                  "type": "text/javascript",
                  "exec": [
                    "console.log('[user] [register] Response: ' + pm.response.text());",
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "const contentType = postman.getResponseHeader('Content-Type');",
                    "pm.test('Content-Type is application/json', function() {",
                    "    pm.expect(contentType).to.have.string('application/json');",
                    "});",
                    "if(pm.response.code==200 && contentType.indexOf('application/json')>=0) {",
                    "    var user = pm.response.json();",
                    "    pm.test('User mobile is ' + pm.variables.get('user-mobile'), function () {",
                    "        pm.expect(user.mobile).to.eql(pm.variables.get('user-mobile'));",
                    "    });",
                    "    console.log('[user] [register] User register successful, userId: ' + user.userId);",
                    "}"
                  ],
                  "_lastExecutionId": "adc99d0b-118b-4887-9202-2f001da47694"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "c2b12661-5763-4e05-ae6b-75cc16f6294b",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "0a17905a-c39b-47e2-b68a-1a8ac075bb12"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "08897af3-80b8-4e8d-928a-6c21732b020e",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "355e2ad6-88b9-4937-aed3-0b1ea8833080"
        }
      }
    ],
    "protocolProfileBehavior": {},
    "variable": [],
    "info": {
      "_postman_id": "b98ba5bf-8843-4063-b411-dd3a2015e7ff",
      "name": "mydemo",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2020-03-15T06:38:49.367Z",
      "postman_exported_using": "Postman/7.20.1"
    },
    "id": "09f63dc2-84d0-413d-88c5-59ab9820f495",
    "name": "docker-env",
    "values": [
      {
        "type": "any",
        "value": "xmysql:3000",
        "key": "xmysql"
      },
      {
        "type": "any",
        "value": "shopweb:8090",
        "key": "shopweb"
      }
    ]
  },
  "globals": {
    "id": "89560bd2-d5d4-48c9-adb8-f8318ba9ce3d",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 14,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 21,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 129.28571428571428,
      "responseMin": 37,
      "responseMax": 280,
      "responseSd": 84.74619972215237,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1584335957009,
      "completed": 1584335958265
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 4,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "603ef765-4efa-4293-a399-077881f9113a",
          "httpRequestId": "db64fd27-66d5-4eb5-9e5a-9efc147defda"
        },
        "item": {
          "id": "09827713-58b5-4d43-a261-6eea14a73505",
          "name": "register-a-user",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "shop",
                "register"
              ],
              "host": [
                "{{shopweb}}"
              ],
              "query": [
                {
                  "key": "mobile",
                  "value": "139{{$randomBankAccount}}"
                },
                {
                  "key": "password",
                  "value": "{{$randomPassword}}"
                }
              ],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "09a480e6-8b07-48b7-9a79-a9a12a7b6f11",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ba779244-5428-4326-9f7a-bf9bd2a2427d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "57dd4f97-248c-4074-9e18-d7070235b5f1",
                "type": "text/javascript",
                "exec": [
                  "console.log('[order] [register] Response: ' + pm.response.text());",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "// Dynamic variables such as $xxx provided by Postman can not be used in Pre-request and Tests scripts.",
                  "// In this example it's used in query params.",
                  "// pm.request.url.query.get('password') returns {{$randomPassword}} in Pre-request script, ",
                  "// and returns the value such as b851JpM_Ej7UwCG in Tests script.",
                  "const mobile = pm.request.url.query.get('mobile'); // Random account generated by Postman",
                  "const password = pm.request.url.query.get('password'); //Random password generated by Postman",
                  "const contentType = postman.getResponseHeader('Content-Type');",
                  "postman.setNextRequest('user-login');",
                  "var alreadyRegistered = false;",
                  "if(contentType.indexOf('application/json')<0) {",
                  "    // If already registered, try register again by another random account and password",
                  "    if(pm.response.text().indexOf('Account ' + mobile + ' already registered')>=0) {",
                  "        alreadyRegistered = true;",
                  "        var retries = pm.collectionVariables.get('register-retries');",
                  "        if(!retries) retries = 1;",
                  "        if(retries>=3) { // Only retry 3 times",
                  "            pm.collectionVariables.unset('register-retries');",
                  "            return; //Stop all tests here",
                  "        }",
                  "        console.log('[order] [register] User ' + mobile + ' already registered, try another user account');",
                  "        pm.collectionVariables.set('register-retries', retries + 1);",
                  "        postman.setNextRequest('register-a-user');",
                  "    }",
                  "}",
                  "if(!alreadyRegistered) {",
                  "    var user = pm.response.json();",
                  "    // Save user info into collection variables, so the next Requests can use these variables",
                  "    pm.collectionVariables.set('user-mobile', mobile);",
                  "    pm.collectionVariables.set('user-password', password);",
                  "    pm.collectionVariables.set('user-id', user.userId);",
                  "    console.log('[order] [register] User register successful, account: ' + mobile + ', password: ' + password + ', userId: ' + user.userId);",
                  "    ",
                  "    pm.test('Content-Type is application/json', function() {",
                  "        pm.expect(contentType).to.have.string('application/json');",
                  "    });",
                  "    pm.test('User id ' + user.userId + ' is valid', function () {",
                  "        pm.expect(user.userId).to.above(0);",
                  "    });",
                  "    pm.test('User mobile is ' + pm.variables.get('user-mobile'), function () {",
                  "        pm.expect(user.mobile).to.eql(pm.variables.get('user-mobile'));",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6dd879a4-2f7d-448e-84bc-05569b4d4e3a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8090",
            "path": [
              "shop",
              "register"
            ],
            "host": [
              "shopweb"
            ],
            "query": [
              {
                "key": "mobile",
                "value": "13912615357"
              },
              {
                "key": "password",
                "value": "z3hlkexAGPlfqKl"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.22.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8f8916c3-20ab-46ff-9ca5-0dd5cdf30c58",
              "system": true
            },
            {
              "key": "Host",
              "value": "shopweb:8090",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 0,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "b3f8c72e-865c-4f16-9bca-0c7001b4e4d1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Set-Cookie",
              "value": "user-id=31; Path=/"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 16 Mar 2020 05:19:17 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              73,
              100,
              34,
              58,
              51,
              49,
              44,
              34,
              110,
              105,
              99,
              107,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              42,
              42,
              42,
              42,
              53,
              51,
              53,
              55,
              34,
              44,
              34,
              109,
              111,
              98,
              105,
              108,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              49,
              50,
              54,
              49,
              53,
              51,
              53,
              55,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              49,
              51,
              58,
              49,
              57,
              58,
              49,
              55,
              46,
              49,
              55,
              57,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 203,
          "responseSize": 128
        },
        "id": "09827713-58b5-4d43-a261-6eea14a73505",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "User id 31 is valid",
            "skipped": false
          },
          {
            "assertion": "User mobile is 13912615357",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "72bf46b8-6930-49f9-8666-28a4d5aebb8b",
          "length": 4,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bbdf0abb-a17c-483f-8282-98a1c1beaea9"
        },
        "item": {
          "id": "51491234-46e0-4b84-ad12-2772eb8752fb",
          "name": "user-login",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "shop",
                "login"
              ],
              "host": [
                "{{shopweb}}"
              ],
              "query": [
                {
                  "key": "mobile",
                  "value": "{{user-mobile}}"
                },
                {
                  "key": "password",
                  "value": "{{user-password}}"
                }
              ],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5534b25a-1259-4ac3-95f9-fff51a3499df",
                "type": "text/javascript",
                "exec": [
                  "console.log('[order] [login] Response: ' + pm.response.text());",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "const contentType = postman.getResponseHeader('Content-Type');",
                  "pm.test('Content-Type is application/json', function() {",
                  "    pm.expect(contentType).to.have.string('application/json');",
                  "});",
                  "if(pm.response.code==200 && contentType.indexOf('application/json')>=0) {",
                  "    var user = pm.response.json();",
                  "    console.log('[order] [login] User login successful');",
                  "    pm.test('User id is ' + pm.variables.get('user-id'), function () {",
                  "        pm.expect(user.userId).to.eql(pm.variables.get('user-id'));",
                  "    });",
                  "    pm.test('User mobile is ' + pm.variables.get('user-mobile'), function () {",
                  "        pm.expect(user.mobile).to.eql(pm.variables.get('user-mobile'));",
                  "    });",
                  "    postman.setNextRequest('create-an-order');",
                  "}"
                ],
                "_lastExecutionId": "974a4d57-b636-4207-87de-423626b35b17"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8090",
            "path": [
              "shop",
              "login"
            ],
            "host": [
              "shopweb"
            ],
            "query": [
              {
                "key": "mobile",
                "value": "13912615357"
              },
              {
                "key": "password",
                "value": "z3hlkexAGPlfqKl"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.22.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e75f714f-6efb-4c71-9760-b2d1583c0d25",
              "system": true
            },
            {
              "key": "Host",
              "value": "shopweb:8090",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "user-id=31",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 0,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "f47d936b-3320-4d13-aaa5-de723874c005",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Set-Cookie",
              "value": "user-id=31; Path=/"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 16 Mar 2020 05:19:17 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              73,
              100,
              34,
              58,
              51,
              49,
              44,
              34,
              110,
              105,
              99,
              107,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              42,
              42,
              42,
              42,
              53,
              51,
              53,
              55,
              34,
              44,
              34,
              109,
              111,
              98,
              105,
              108,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              49,
              50,
              54,
              49,
              53,
              51,
              53,
              55,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              49,
              51,
              58,
              49,
              57,
              58,
              49,
              55,
              46,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              48,
              53,
              58,
              49,
              57,
              58,
              49,
              55,
              46,
              48,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 37,
          "responseSize": 149
        },
        "id": "51491234-46e0-4b84-ad12-2772eb8752fb",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "User id is 31",
            "skipped": false
          },
          {
            "assertion": "User mobile is 13912615357",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "95222e4f-76a4-4e22-b5c7-1b35bae12147",
          "length": 4,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "89e62085-400b-4467-99da-b72f2f2f90a9"
        },
        "item": {
          "id": "2f6f33ec-ea6b-42b2-b093-66ac41987cb3",
          "name": "create-an-order",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "shop",
                "order",
                "create"
              ],
              "host": [
                "{{shopweb}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Cookie",
                "value": "user-id={{user-id}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d972d82b-1f9b-4690-8e6f-8729edac7c9a",
                "type": "text/javascript",
                "exec": [
                  "console.log('[order] [create] Response: ' + pm.response.text());",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "const contentType = postman.getResponseHeader('Content-Type');",
                  "pm.test('Content-Type is application/json', function() {",
                  "    pm.expect(contentType).to.have.string('application/json');",
                  "});",
                  "if(pm.response.code==200 && contentType.indexOf('application/json')>=0) {",
                  "    const order = pm.response.json();",
                  "    console.log('[order] [create] Order created, orderId: ' + order.orderId);",
                  "    pm.test('Order id ' + order.orderId + ' is valid', function () {",
                  "        pm.expect(order.orderId).to.above(0);",
                  "    });",
                  "    pm.test('Order user id is ' + pm.variables.get('user-id'), function () {",
                  "        pm.expect(order.userId).to.eql(pm.variables.get('user-id'));",
                  "    });",
                  "    pm.test('Order status is New', function () {",
                  "        pm.expect(order.status).to.eql('New');",
                  "    });",
                  "    pm.test('Order total ' + order.total + ' is valid', function () {",
                  "        pm.expect(order.total).to.above(0);",
                  "    });",
                  "    pm.test('Order pay status is New', function () {",
                  "        pm.expect(order.payStatus).to.eql('New');",
                  "    });",
                  "    pm.test('Order payment is 0', function () {",
                  "        pm.expect(order.payment).to.eql(0);",
                  "    });",
                  "    pm.test('Order phone is ' + pm.variables.get('user-mobile'), function () {",
                  "        pm.expect(order.phone).to.eql(pm.variables.get('user-mobile'));",
                  "    });",
                  "    pm.test('Order items is valid', function () {",
                  "        pm.expect(order.items).to.not.be.NaN;",
                  "        pm.expect(order.items.length).to.above(0);",
                  "    });",
                  "}",
                  "// Clear collection variables",
                  "pm.collectionVariables.unset('user-id');",
                  "pm.collectionVariables.unset('user-mobile');",
                  "pm.collectionVariables.unset('user-password');",
                  "pm.collectionVariables.unset('register-retries');"
                ],
                "_lastExecutionId": "7f97c125-a802-49a1-9f76-9a57256a4a13"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8090",
            "path": [
              "shop",
              "order",
              "create"
            ],
            "host": [
              "shopweb"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Cookie",
              "value": "user-id=31; user-id=31",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.22.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3316cae5-9932-432b-b29d-d9c9153cd976",
              "system": true
            },
            {
              "key": "Host",
              "value": "shopweb:8090",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 0,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "b3a00853-e8c1-4fd0-b63c-969ac88e6866",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 16 Mar 2020 05:19:17 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              111,
              114,
              100,
              101,
              114,
              73,
              100,
              34,
              58,
              54,
              57,
              53,
              55,
              49,
              49,
              53,
              55,
              51,
              52,
              48,
              44,
              34,
              117,
              115,
              101,
              114,
              73,
              100,
              34,
              58,
              51,
              49,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              78,
              101,
              119,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              52,
              54,
              48,
              51,
              46,
              57,
              52,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              57,
              52,
              46,
              48,
              54,
              44,
              34,
              112,
              97,
              121,
              109,
              101,
              110,
              116,
              34,
              58,
              48,
              46,
              48,
              44,
              34,
              112,
              97,
              121,
              84,
              105,
              109,
              101,
              34,
              58,
              34,
              49,
              57,
              48,
              48,
              45,
              48,
              49,
              45,
              48,
              49,
              32,
              48,
              56,
              58,
              48,
              53,
              58,
              52,
              51,
              46,
              48,
              48,
              48,
              34,
              44,
              34,
              112,
              97,
              121,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              78,
              101,
              119,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              34,
              58,
              34,
              49,
              51,
              57,
              42,
              42,
              42,
              42,
              53,
              51,
              53,
              55,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              49,
              50,
              54,
              49,
              53,
              51,
              53,
              55,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              78,
              111,
              46,
              32,
              49,
              56,
              44,
              32,
              68,
              97,
              110,
              108,
              101,
              110,
              103,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              44,
              32,
              72,
              97,
              105,
              100,
              105,
              97,
              110,
              32,
              68,
              105,
              115,
              116,
              114,
              105,
              99,
              116,
              44,
              32,
              66,
              101,
              105,
              106,
              105,
              110,
              103,
              32,
              67,
              105,
              116,
              121,
              44,
              32,
              67,
              104,
              105,
              110,
              97,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              49,
              51,
              58,
              49,
              57,
              58,
              49,
              56,
              46,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              48,
              53,
              58,
              49,
              57,
              58,
              49,
              55,
              46,
              48,
              48,
              48,
              34,
              44,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              111,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              73,
              100,
              34,
              58,
              50,
              51,
              44,
              34,
              111,
              114,
              100,
              101,
              114,
              73,
              100,
              34,
              58,
              54,
              57,
              53,
              55,
              49,
              49,
              53,
              55,
              51,
              52,
              48,
              44,
              34,
              105,
              116,
              101,
              109,
              73,
              100,
              34,
              58,
              54,
              53,
              57,
              56,
              50,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              228,
              186,
              148,
              231,
              178,
              174,
              230,
              182,
              178,
              232,
              130,
              161,
              228,
              187,
              189,
              229,
              133,
              172,
              229,
              143,
              184,
              229,
              135,
              186,
              229,
              147,
              129,
              32,
              228,
              186,
              148,
              231,
              178,
              174,
              231,
              178,
              190,
              233,
              133,
              191,
              32,
              231,
              164,
              188,
              233,
              137,
              180,
              231,
              143,
              141,
              229,
              147,
              129,
              32,
              53,
              50,
              229,
              186,
              166,
              32,
              230,
              181,
              147,
              233,
              166,
              153,
              229,
              158,
              139,
              231,
              153,
              189,
              233,
              133,
              146,
              32,
              53,
              48,
              48,
              109,
              108,
              34,
              44,
              34,
              113,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              49,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              53,
              57,
              57,
              46,
              48,
              44,
              34,
              115,
              117,
              98,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              53,
              52,
              55,
              46,
              53,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              53,
              49,
              46,
              53,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              49,
              51,
              58,
              49,
              57,
              58,
              49,
              56,
              46,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              48,
              53,
              58,
              49,
              57,
              58,
              49,
              55,
              46,
              48,
              48,
              48,
              34,
              125,
              44,
              123,
              34,
              111,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              73,
              100,
              34,
              58,
              50,
              52,
              44,
              34,
              111,
              114,
              100,
              101,
              114,
              73,
              100,
              34,
              58,
              54,
              57,
              53,
              55,
              49,
              49,
              53,
              55,
              51,
              52,
              48,
              44,
              34,
              105,
              116,
              101,
              109,
              73,
              100,
              34,
              58,
              50,
              48,
              57,
              49,
              50,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              229,
              141,
              142,
              228,
              184,
              186,
              40,
              72,
              85,
              65,
              87,
              69,
              73,
              41,
              77,
              97,
              116,
              101,
              66,
              111,
              111,
              107,
              32,
              49,
              51,
              32,
              233,
              148,
              144,
              233,
              190,
              153,
              231,
              137,
              136,
              32,
              229,
              133,
              168,
              233,
              157,
              162,
              229,
              177,
              143,
              232,
              189,
              187,
              232,
              150,
              132,
              230,
              128,
              167,
              232,
              131,
              189,
              231,
              172,
              148,
              232,
              174,
              176,
              230,
              156,
              172,
              231,
              148,
              181,
              232,
              132,
              145,
              40,
              65,
              77,
              68,
              32,
              82,
              53,
              32,
              56,
              43,
              53,
              49,
              50,
              71,
              66,
              32,
              50,
              75,
              32,
              233,
              155,
              134,
              230,
              152,
              190,
              41,
              233,
              147,
              182,
              34,
              44,
              34,
              113,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              49,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              52,
              48,
              57,
              57,
              46,
              48,
              44,
              34,
              115,
              117,
              98,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              52,
              48,
              53,
              50,
              46,
              52,
              52,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              52,
              54,
              46,
              53,
              54,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              49,
              51,
              58,
              49,
              57,
              58,
              49,
              56,
              46,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              48,
              53,
              58,
              49,
              57,
              58,
              49,
              55,
              46,
              48,
              48,
              48,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 280,
          "responseSize": 952
        },
        "id": "2f6f33ec-ea6b-42b2-b093-66ac41987cb3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "Order id 69571157340 is valid",
            "skipped": false
          },
          {
            "assertion": "Order user id is 31",
            "skipped": false
          },
          {
            "assertion": "Order status is New",
            "skipped": false
          },
          {
            "assertion": "Order total 4603.94 is valid",
            "skipped": false
          },
          {
            "assertion": "Order pay status is New",
            "skipped": false
          },
          {
            "assertion": "Order payment is 0",
            "skipped": false
          },
          {
            "assertion": "Order phone is 13912615357",
            "skipped": false
          },
          {
            "assertion": "Order items is valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4cea10d4-0338-4824-abea-cf00dd12ca3a",
          "length": 4,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f273cedb-5db4-48c5-8bfe-e1601f5c04c4"
        },
        "item": {
          "id": "6a0139df-5ecf-4c39-892c-b173f4bc16e8",
          "name": "register",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "shop",
                "register"
              ],
              "host": [
                "{{shopweb}}"
              ],
              "query": [
                {
                  "key": "mobile",
                  "value": "13966668888"
                },
                {
                  "key": "password",
                  "value": "111111"
                }
              ],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "492c1d0a-e77f-45a0-9d21-52c0af80c9df",
                "type": "text/javascript",
                "exec": [
                  "const mobile = pm.request.url.query.get('mobile');\r",
                  "const password = pm.request.url.query.get('password');\r",
                  "console.log('[user] [register] User to be registered: ' + mobile + \" : \" + password);\r",
                  "// Save mobile and password as local variables\r",
                  "pm.variables.set('user-mobile', mobile);\r",
                  "pm.variables.set('user-password', password);\r",
                  "// Query MySQL if mobile is registered\r",
                  "const url = 'http://' + pm.environment.get('xmysql') + '/api/usr_user_account?_where=(account,eq,' + mobile + ')';\r",
                  "pm.sendRequest(url, function (err, response) {\r",
                  "    if(err) {\r",
                  "        console.log('[user] [register] Can not identify whether the user is registered, MySQL error: ' + err.code);\r",
                  "        const text = response.text();\r",
                  "        if(text) console.log(text);\r",
                  "        return;\r",
                  "    }\r",
                  "    if(response.code!='200' || response.headers.get('Content-Type').indexOf('application/json')<0) {\r",
                  "        console.log('[user] [register] Can not identify whether the user is registered, MySQL error.');\r",
                  "        const text = response.text();\r",
                  "        if(text) console.log(text);\r",
                  "        return;\r",
                  "    } \r",
                  "    var json = response.json();\r",
                  "    if(json.length<=0) {\r",
                  "        console.log('[user] [register] User ' + mobile + ' not registered');\r",
                  "        return;\r",
                  "    }\r",
                  "    const userId = json[0].user_id;\r",
                  "    console.log('[user] [register] ' + mobile + ' is already registered, userId is ' + userId + ', delete it from MySQL');\r",
                  "    pm.sendRequest(\r",
                  "        { url:'http://' + pm.environment.get('xmysql') + '/api/usr_user_account/' + mobile, method: 'DELETE' }, \r",
                  "        function(err1, rsp1) {\r",
                  "            if(err1) console.log('[user] [register] Delete user account ' + mobile + ' failed');\r",
                  "        }\r",
                  "    );\r",
                  "    pm.sendRequest(\r",
                  "        { url:'http://' + pm.environment.get('xmysql') + '/api/usr_user/' + userId, method: 'DELETE' }, \r",
                  "        function(err2, rsp2) {\r",
                  "            if(err2) console.log('[user] [register] Delete user ' + userId + ' failed');\r",
                  "        }\r",
                  "    );\r",
                  "});"
                ],
                "_lastExecutionId": "62cf54f8-39fa-4ef9-839c-0001918e2aea"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e5eff959-17ff-4910-9ea3-ba13410d6a53",
                "type": "text/javascript",
                "exec": [
                  "console.log('[user] [register] Response: ' + pm.response.text());",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const contentType = postman.getResponseHeader('Content-Type');",
                  "pm.test('Content-Type is application/json', function() {",
                  "    pm.expect(contentType).to.have.string('application/json');",
                  "});",
                  "if(pm.response.code==200 && contentType.indexOf('application/json')>=0) {",
                  "    var user = pm.response.json();",
                  "    pm.test('User mobile is ' + pm.variables.get('user-mobile'), function () {",
                  "        pm.expect(user.mobile).to.eql(pm.variables.get('user-mobile'));",
                  "    });",
                  "    console.log('[user] [register] User register successful, userId: ' + user.userId);",
                  "}"
                ],
                "_lastExecutionId": "adc99d0b-118b-4887-9202-2f001da47694"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8090",
            "path": [
              "shop",
              "register"
            ],
            "host": [
              "shopweb"
            ],
            "query": [
              {
                "key": "mobile",
                "value": "13966668888"
              },
              {
                "key": "password",
                "value": "111111"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.22.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "531db45a-b792-4496-95ff-1a749be43841",
              "system": true
            },
            {
              "key": "Host",
              "value": "shopweb:8090",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "user-id=31",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 0,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "e4ca5237-a12f-4410-bcb0-b7b80d28d69d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Set-Cookie",
              "value": "user-id=32; Path=/"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 16 Mar 2020 05:19:17 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              73,
              100,
              34,
              58,
              51,
              50,
              44,
              34,
              110,
              105,
              99,
              107,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              42,
              42,
              42,
              42,
              56,
              56,
              56,
              56,
              34,
              44,
              34,
              109,
              111,
              98,
              105,
              108,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              54,
              54,
              54,
              54,
              56,
              56,
              56,
              56,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              49,
              51,
              58,
              49,
              57,
              58,
              49,
              56,
              46,
              48,
              54,
              48,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 169,
          "responseSize": 128
        },
        "id": "6a0139df-5ecf-4c39-892c-b173f4bc16e8",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "User mobile is 13966668888",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4cea10d4-0338-4824-abea-cf00dd12ca3a",
          "length": 4,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f273cedb-5db4-48c5-8bfe-e1601f5c04c4"
        },
        "item": {
          "id": "6a0139df-5ecf-4c39-892c-b173f4bc16e8",
          "name": "register",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "shop",
                "register"
              ],
              "host": [
                "{{shopweb}}"
              ],
              "query": [
                {
                  "key": "mobile",
                  "value": "13966668888"
                },
                {
                  "key": "password",
                  "value": "111111"
                }
              ],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "492c1d0a-e77f-45a0-9d21-52c0af80c9df",
                "type": "text/javascript",
                "exec": [
                  "const mobile = pm.request.url.query.get('mobile');\r",
                  "const password = pm.request.url.query.get('password');\r",
                  "console.log('[user] [register] User to be registered: ' + mobile + \" : \" + password);\r",
                  "// Save mobile and password as local variables\r",
                  "pm.variables.set('user-mobile', mobile);\r",
                  "pm.variables.set('user-password', password);\r",
                  "// Query MySQL if mobile is registered\r",
                  "const url = 'http://' + pm.environment.get('xmysql') + '/api/usr_user_account?_where=(account,eq,' + mobile + ')';\r",
                  "pm.sendRequest(url, function (err, response) {\r",
                  "    if(err) {\r",
                  "        console.log('[user] [register] Can not identify whether the user is registered, MySQL error: ' + err.code);\r",
                  "        const text = response.text();\r",
                  "        if(text) console.log(text);\r",
                  "        return;\r",
                  "    }\r",
                  "    if(response.code!='200' || response.headers.get('Content-Type').indexOf('application/json')<0) {\r",
                  "        console.log('[user] [register] Can not identify whether the user is registered, MySQL error.');\r",
                  "        const text = response.text();\r",
                  "        if(text) console.log(text);\r",
                  "        return;\r",
                  "    } \r",
                  "    var json = response.json();\r",
                  "    if(json.length<=0) {\r",
                  "        console.log('[user] [register] User ' + mobile + ' not registered');\r",
                  "        return;\r",
                  "    }\r",
                  "    const userId = json[0].user_id;\r",
                  "    console.log('[user] [register] ' + mobile + ' is already registered, userId is ' + userId + ', delete it from MySQL');\r",
                  "    pm.sendRequest(\r",
                  "        { url:'http://' + pm.environment.get('xmysql') + '/api/usr_user_account/' + mobile, method: 'DELETE' }, \r",
                  "        function(err1, rsp1) {\r",
                  "            if(err1) console.log('[user] [register] Delete user account ' + mobile + ' failed');\r",
                  "        }\r",
                  "    );\r",
                  "    pm.sendRequest(\r",
                  "        { url:'http://' + pm.environment.get('xmysql') + '/api/usr_user/' + userId, method: 'DELETE' }, \r",
                  "        function(err2, rsp2) {\r",
                  "            if(err2) console.log('[user] [register] Delete user ' + userId + ' failed');\r",
                  "        }\r",
                  "    );\r",
                  "});"
                ],
                "_lastExecutionId": "62cf54f8-39fa-4ef9-839c-0001918e2aea"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e5eff959-17ff-4910-9ea3-ba13410d6a53",
                "type": "text/javascript",
                "exec": [
                  "console.log('[user] [register] Response: ' + pm.response.text());",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const contentType = postman.getResponseHeader('Content-Type');",
                  "pm.test('Content-Type is application/json', function() {",
                  "    pm.expect(contentType).to.have.string('application/json');",
                  "});",
                  "if(pm.response.code==200 && contentType.indexOf('application/json')>=0) {",
                  "    var user = pm.response.json();",
                  "    pm.test('User mobile is ' + pm.variables.get('user-mobile'), function () {",
                  "        pm.expect(user.mobile).to.eql(pm.variables.get('user-mobile'));",
                  "    });",
                  "    console.log('[user] [register] User register successful, userId: ' + user.userId);",
                  "}"
                ],
                "_lastExecutionId": "adc99d0b-118b-4887-9202-2f001da47694"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8090",
            "path": [
              "shop",
              "register"
            ],
            "host": [
              "shopweb"
            ],
            "query": [
              {
                "key": "mobile",
                "value": "13966668888"
              },
              {
                "key": "password",
                "value": "111111"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.22.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "531db45a-b792-4496-95ff-1a749be43841",
              "system": true
            },
            {
              "key": "Host",
              "value": "shopweb:8090",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "user-id=31",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 0,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "e4ca5237-a12f-4410-bcb0-b7b80d28d69d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Set-Cookie",
              "value": "user-id=32; Path=/"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 16 Mar 2020 05:19:17 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              73,
              100,
              34,
              58,
              51,
              50,
              44,
              34,
              110,
              105,
              99,
              107,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              42,
              42,
              42,
              42,
              56,
              56,
              56,
              56,
              34,
              44,
              34,
              109,
              111,
              98,
              105,
              108,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              54,
              54,
              54,
              54,
              56,
              56,
              56,
              56,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              49,
              51,
              58,
              49,
              57,
              58,
              49,
              56,
              46,
              48,
              54,
              48,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 169,
          "responseSize": 128
        },
        "id": "6a0139df-5ecf-4c39-892c-b173f4bc16e8",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "User mobile is 13966668888",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4cea10d4-0338-4824-abea-cf00dd12ca3a",
          "length": 4,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f273cedb-5db4-48c5-8bfe-e1601f5c04c4"
        },
        "item": {
          "id": "6a0139df-5ecf-4c39-892c-b173f4bc16e8",
          "name": "register",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "shop",
                "register"
              ],
              "host": [
                "{{shopweb}}"
              ],
              "query": [
                {
                  "key": "mobile",
                  "value": "13966668888"
                },
                {
                  "key": "password",
                  "value": "111111"
                }
              ],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "492c1d0a-e77f-45a0-9d21-52c0af80c9df",
                "type": "text/javascript",
                "exec": [
                  "const mobile = pm.request.url.query.get('mobile');\r",
                  "const password = pm.request.url.query.get('password');\r",
                  "console.log('[user] [register] User to be registered: ' + mobile + \" : \" + password);\r",
                  "// Save mobile and password as local variables\r",
                  "pm.variables.set('user-mobile', mobile);\r",
                  "pm.variables.set('user-password', password);\r",
                  "// Query MySQL if mobile is registered\r",
                  "const url = 'http://' + pm.environment.get('xmysql') + '/api/usr_user_account?_where=(account,eq,' + mobile + ')';\r",
                  "pm.sendRequest(url, function (err, response) {\r",
                  "    if(err) {\r",
                  "        console.log('[user] [register] Can not identify whether the user is registered, MySQL error: ' + err.code);\r",
                  "        const text = response.text();\r",
                  "        if(text) console.log(text);\r",
                  "        return;\r",
                  "    }\r",
                  "    if(response.code!='200' || response.headers.get('Content-Type').indexOf('application/json')<0) {\r",
                  "        console.log('[user] [register] Can not identify whether the user is registered, MySQL error.');\r",
                  "        const text = response.text();\r",
                  "        if(text) console.log(text);\r",
                  "        return;\r",
                  "    } \r",
                  "    var json = response.json();\r",
                  "    if(json.length<=0) {\r",
                  "        console.log('[user] [register] User ' + mobile + ' not registered');\r",
                  "        return;\r",
                  "    }\r",
                  "    const userId = json[0].user_id;\r",
                  "    console.log('[user] [register] ' + mobile + ' is already registered, userId is ' + userId + ', delete it from MySQL');\r",
                  "    pm.sendRequest(\r",
                  "        { url:'http://' + pm.environment.get('xmysql') + '/api/usr_user_account/' + mobile, method: 'DELETE' }, \r",
                  "        function(err1, rsp1) {\r",
                  "            if(err1) console.log('[user] [register] Delete user account ' + mobile + ' failed');\r",
                  "        }\r",
                  "    );\r",
                  "    pm.sendRequest(\r",
                  "        { url:'http://' + pm.environment.get('xmysql') + '/api/usr_user/' + userId, method: 'DELETE' }, \r",
                  "        function(err2, rsp2) {\r",
                  "            if(err2) console.log('[user] [register] Delete user ' + userId + ' failed');\r",
                  "        }\r",
                  "    );\r",
                  "});"
                ],
                "_lastExecutionId": "62cf54f8-39fa-4ef9-839c-0001918e2aea"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e5eff959-17ff-4910-9ea3-ba13410d6a53",
                "type": "text/javascript",
                "exec": [
                  "console.log('[user] [register] Response: ' + pm.response.text());",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const contentType = postman.getResponseHeader('Content-Type');",
                  "pm.test('Content-Type is application/json', function() {",
                  "    pm.expect(contentType).to.have.string('application/json');",
                  "});",
                  "if(pm.response.code==200 && contentType.indexOf('application/json')>=0) {",
                  "    var user = pm.response.json();",
                  "    pm.test('User mobile is ' + pm.variables.get('user-mobile'), function () {",
                  "        pm.expect(user.mobile).to.eql(pm.variables.get('user-mobile'));",
                  "    });",
                  "    console.log('[user] [register] User register successful, userId: ' + user.userId);",
                  "}"
                ],
                "_lastExecutionId": "adc99d0b-118b-4887-9202-2f001da47694"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8090",
            "path": [
              "shop",
              "register"
            ],
            "host": [
              "shopweb"
            ],
            "query": [
              {
                "key": "mobile",
                "value": "13966668888"
              },
              {
                "key": "password",
                "value": "111111"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.22.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "531db45a-b792-4496-95ff-1a749be43841",
              "system": true
            },
            {
              "key": "Host",
              "value": "shopweb:8090",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "user-id=31",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 0,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "e4ca5237-a12f-4410-bcb0-b7b80d28d69d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Set-Cookie",
              "value": "user-id=32; Path=/"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 16 Mar 2020 05:19:17 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              73,
              100,
              34,
              58,
              51,
              50,
              44,
              34,
              110,
              105,
              99,
              107,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              42,
              42,
              42,
              42,
              56,
              56,
              56,
              56,
              34,
              44,
              34,
              109,
              111,
              98,
              105,
              108,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              54,
              54,
              54,
              54,
              56,
              56,
              56,
              56,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              49,
              51,
              58,
              49,
              57,
              58,
              49,
              56,
              46,
              48,
              54,
              48,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 169,
          "responseSize": 128
        },
        "id": "6a0139df-5ecf-4c39-892c-b173f4bc16e8",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "User mobile is 13966668888",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4cea10d4-0338-4824-abea-cf00dd12ca3a",
          "length": 4,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f273cedb-5db4-48c5-8bfe-e1601f5c04c4"
        },
        "item": {
          "id": "6a0139df-5ecf-4c39-892c-b173f4bc16e8",
          "name": "register",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "shop",
                "register"
              ],
              "host": [
                "{{shopweb}}"
              ],
              "query": [
                {
                  "key": "mobile",
                  "value": "13966668888"
                },
                {
                  "key": "password",
                  "value": "111111"
                }
              ],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "492c1d0a-e77f-45a0-9d21-52c0af80c9df",
                "type": "text/javascript",
                "exec": [
                  "const mobile = pm.request.url.query.get('mobile');\r",
                  "const password = pm.request.url.query.get('password');\r",
                  "console.log('[user] [register] User to be registered: ' + mobile + \" : \" + password);\r",
                  "// Save mobile and password as local variables\r",
                  "pm.variables.set('user-mobile', mobile);\r",
                  "pm.variables.set('user-password', password);\r",
                  "// Query MySQL if mobile is registered\r",
                  "const url = 'http://' + pm.environment.get('xmysql') + '/api/usr_user_account?_where=(account,eq,' + mobile + ')';\r",
                  "pm.sendRequest(url, function (err, response) {\r",
                  "    if(err) {\r",
                  "        console.log('[user] [register] Can not identify whether the user is registered, MySQL error: ' + err.code);\r",
                  "        const text = response.text();\r",
                  "        if(text) console.log(text);\r",
                  "        return;\r",
                  "    }\r",
                  "    if(response.code!='200' || response.headers.get('Content-Type').indexOf('application/json')<0) {\r",
                  "        console.log('[user] [register] Can not identify whether the user is registered, MySQL error.');\r",
                  "        const text = response.text();\r",
                  "        if(text) console.log(text);\r",
                  "        return;\r",
                  "    } \r",
                  "    var json = response.json();\r",
                  "    if(json.length<=0) {\r",
                  "        console.log('[user] [register] User ' + mobile + ' not registered');\r",
                  "        return;\r",
                  "    }\r",
                  "    const userId = json[0].user_id;\r",
                  "    console.log('[user] [register] ' + mobile + ' is already registered, userId is ' + userId + ', delete it from MySQL');\r",
                  "    pm.sendRequest(\r",
                  "        { url:'http://' + pm.environment.get('xmysql') + '/api/usr_user_account/' + mobile, method: 'DELETE' }, \r",
                  "        function(err1, rsp1) {\r",
                  "            if(err1) console.log('[user] [register] Delete user account ' + mobile + ' failed');\r",
                  "        }\r",
                  "    );\r",
                  "    pm.sendRequest(\r",
                  "        { url:'http://' + pm.environment.get('xmysql') + '/api/usr_user/' + userId, method: 'DELETE' }, \r",
                  "        function(err2, rsp2) {\r",
                  "            if(err2) console.log('[user] [register] Delete user ' + userId + ' failed');\r",
                  "        }\r",
                  "    );\r",
                  "});"
                ],
                "_lastExecutionId": "62cf54f8-39fa-4ef9-839c-0001918e2aea"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e5eff959-17ff-4910-9ea3-ba13410d6a53",
                "type": "text/javascript",
                "exec": [
                  "console.log('[user] [register] Response: ' + pm.response.text());",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const contentType = postman.getResponseHeader('Content-Type');",
                  "pm.test('Content-Type is application/json', function() {",
                  "    pm.expect(contentType).to.have.string('application/json');",
                  "});",
                  "if(pm.response.code==200 && contentType.indexOf('application/json')>=0) {",
                  "    var user = pm.response.json();",
                  "    pm.test('User mobile is ' + pm.variables.get('user-mobile'), function () {",
                  "        pm.expect(user.mobile).to.eql(pm.variables.get('user-mobile'));",
                  "    });",
                  "    console.log('[user] [register] User register successful, userId: ' + user.userId);",
                  "}"
                ],
                "_lastExecutionId": "adc99d0b-118b-4887-9202-2f001da47694"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8090",
            "path": [
              "shop",
              "register"
            ],
            "host": [
              "shopweb"
            ],
            "query": [
              {
                "key": "mobile",
                "value": "13966668888"
              },
              {
                "key": "password",
                "value": "111111"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.22.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "531db45a-b792-4496-95ff-1a749be43841",
              "system": true
            },
            {
              "key": "Host",
              "value": "shopweb:8090",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "user-id=31",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 0,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "e4ca5237-a12f-4410-bcb0-b7b80d28d69d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Set-Cookie",
              "value": "user-id=32; Path=/"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 16 Mar 2020 05:19:17 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              73,
              100,
              34,
              58,
              51,
              50,
              44,
              34,
              110,
              105,
              99,
              107,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              42,
              42,
              42,
              42,
              56,
              56,
              56,
              56,
              34,
              44,
              34,
              109,
              111,
              98,
              105,
              108,
              101,
              34,
              58,
              34,
              49,
              51,
              57,
              54,
              54,
              54,
              54,
              56,
              56,
              56,
              56,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              51,
              45,
              49,
              54,
              32,
              49,
              51,
              58,
              49,
              57,
              58,
              49,
              56,
              46,
              48,
              54,
              48,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 169,
          "responseSize": 128
        },
        "id": "6a0139df-5ecf-4c39-892c-b173f4bc16e8",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "User mobile is 13966668888",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1723
    },
    "failures": [],
    "error": null
  }
}